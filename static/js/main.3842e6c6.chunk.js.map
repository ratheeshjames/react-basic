{"version":3,"sources":["logo.svg","Appbar/Appbar.js","Card/Card.js","Tabs/Tabs.js","App.js","Theme/Theme.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","offset","mixins","toolbar","ButtonAppBar","classes","className","AppBar","position","color","Toolbar","Typography","variant","IconButton","aria-label","edge","margin","bullet","display","transform","fontSize","pos","marginBottom","SimpleCard","Card","ButtonBase","CardContent","src","logo","alt","href","target","rel","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","FullWidthTabs","useTheme","React","useState","setValue","Tabs","onChange","event","newValue","indicatorColor","textColor","Tab","label","axis","direction","onChangeIndex","dir","App","Theme","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3842e6c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  offset: theme.mixins.toolbar,\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" color=\"inherit\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Basic\r\n          </Typography>\r\n          <IconButton\r\n            aria-label=\"display more actions\"\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n          >\r\n            <MoreIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.offset} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport \"../App.css\";\r\nimport logo from \"../logo.svg\";\r\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: \"24px\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <ButtonBase>\r\n        <CardContent>\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>\r\n              Edit <code>src/App.js</code> and save to reload.\r\n            </p>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn React\r\n            </a>\r\n          </header>\r\n        </CardContent>\r\n      </ButtonBase>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport SimpleCard from \"../Card/Card\";\r\nimport {Card} from \"@material-ui/core\";\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n    },\r\n}));\r\n\r\nexport default function FullWidthTabs() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" color=\"inherit\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"Item One\" {...a11yProps(0)} />\r\n                    <Tab label=\"Item Two\" {...a11yProps(1)} />\r\n                    <Tab label=\"Item Three\" {...a11yProps(2)} />\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <SimpleCard/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    Item Two\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    Item Three\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Appbar from \"./Appbar/Appbar\";\nimport {Tabs} from \"@material-ui/core\";\nimport FullWidthTabs from \"./Tabs/Tabs\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Appbar/>\n      <FullWidthTabs/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport App from \"../App\";\r\n\r\nfunction Theme() {\r\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createMuiTheme({\r\n                palette: {\r\n                    type: prefersDarkMode ? 'dark' : 'light',\r\n                },\r\n            }),\r\n        [prefersDarkMode],\r\n    );\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <App/>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      //const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      const swUrl = `./service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Theme from \"./Theme/Theme\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Theme/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}